const utils = require('utils');

/**
 * ËøúÁ®ãËøêËæìËÄÖËßíËâ≤Ê®°Âùó
 * Ë¥üË¥£‰ªéËøúÁ®ãÊàøÈó¥ÔºàÈÄöÂ∏∏ÊòØË¢´È¢ÑÂÆöÁöÑÊàøÈó¥ÔºâÊî∂ÈõÜËÉΩÈáèÔºåÂπ∂Â∞ÜÂÖ∂ËøêËæìÂõû‰∏ªÊàøÈó¥
 */
const roleRemoteHauler = {
    /**
     * RemoteHaulerÁöÑ‰∏ªË¶ÅËøêË°åÈÄªËæë
     * @param {Creep} creep - Ë¶ÅÊéßÂà∂ÁöÑcreepÂØπË±°
     */
    run: function(creep) {
        // Áä∂ÊÄÅÂàáÊç¢ÈÄªËæëÔºåÂ∏¶ÊúâËá™ÂÆö‰πâÊèêÁ§∫‰ø°ÊÅØ
        utils.switchWorkState(creep, 'üîÑ Êî∂ÈõÜ', 'üì¶ ËøêËæì');
        
        // Â¶ÇÊûúÂú®Â∑•‰ΩúÊ®°ÂºèÔºàÂàÜÂèëËÉΩÈáèÔºâÈúÄË¶ÅÂõûÂà∞‰∏ªÊàøÈó¥
        if(creep.memory.working) {
            // Â¶ÇÊûú‰∏çÂú®‰∏ªÊàøÈó¥ÔºåËøîÂõû‰∏ªÊàøÈó¥
            if(creep.memory.homeRoom && creep.room.name !== creep.memory.homeRoom) {
                const exitDir = Game.map.findExit(creep.room, creep.memory.homeRoom);
                const exit = creep.pos.findClosestByPath(exitDir);
                creep.moveTo(exit, {visualizePathStyle: {stroke: '#ffffff'}});
                return;
            }

            // Â∑≤ÁªèÂú®‰∏ªÊàøÈó¥ÔºåÂØªÊâæÈúÄË¶ÅËÉΩÈáèÁöÑÂª∫Á≠ë
            const target = creep.room.find(FIND_STRUCTURES, {
                filter: s => s.structureType === STRUCTURE_STORAGE && 
                            s.store.getFreeCapacity(RESOURCE_ENERGY) > 0
            })[0];

            if(target) {
                // Â∞ùËØïÂ∞ÜËÉΩÈáèËΩ¨ÁßªÂà∞ÁõÆÊ†á
                if(creep.transfer(target, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {
                    creep.moveTo(target, {visualizePathStyle: {stroke: '#ffffff'}});
                }
            }

            // Â¶ÇÊûúÊâÄÊúâÂª∫Á≠ëÈÉΩÊª°‰∫ÜÔºåÊ£ÄÊü•ÊòØÂê¶‰∏ªÊàøÈó¥ÊâÄÊúâËÉΩÈáèÂ≠òÂÇ®ËÆæÊñΩÈÉΩÊª°‰∫Ü
            else {
                // Êç¢Âà∞ÂæÖÂëΩÁä∂ÊÄÅ
                creep.memory.waiting = true;
                    
                // ÁßªÂä®Âà∞ÊàøÈó¥‰∏≠ÂøÉÂæÖÂëΩÂå∫Âüü
                creep.moveTo(new RoomPosition(25, 25, creep.room.name), {
                    visualizePathStyle: {stroke: '#ffff00'},
                    range: 10
                });
            }
        }
        // Â¶ÇÊûúÂú®Êî∂ÈõÜÊ®°ÂºèÔºåÈúÄË¶ÅÂéªÁõÆÊ†áÊàøÈó¥Êî∂ÈõÜËÉΩÈáè
        else {
            // Ê∏ÖÈô§ÂæÖÂëΩÁä∂ÊÄÅ
            creep.memory.waiting = false;
            
            // Â¶ÇÊûú‰∏çÂú®ÁõÆÊ†áÊàøÈó¥ÔºåÂâçÂæÄÁõÆÊ†áÊàøÈó¥
            if(creep.memory.targetRoom && creep.room.name !== creep.memory.targetRoom) {
                const exitDir = Game.map.findExit(creep.room, creep.memory.targetRoom);
                const exit = creep.pos.findClosestByRange(exitDir);
                creep.moveTo(exit, {visualizePathStyle: {stroke: '#ffaa00'}});
                return;
            }
            
            // Â∑≤ÁªèÂú®ÁõÆÊ†áÊàøÈó¥ÔºåÂØªÊâæËÉΩÈáèÊù•Ê∫ê
            // ‰ºòÂÖàËÄÉËôë‰ªéÂÆπÂô®„ÄÅÂ¢ìÁ¢ëÊàñÊéâËêΩÁöÑËµÑÊ∫ê‰∏≠Ëé∑ÂèñËÉΩÈáè
            let source = null;
            
            // Êü•ÊâæË£ÖÊª°ËÉΩÈáèÁöÑÂÆπÂô®
            const containers = creep.room.find(FIND_STRUCTURES, {
                filter: s => s.structureType === STRUCTURE_CONTAINER && 
                          s.store.getUsedCapacity(RESOURCE_ENERGY) > 50
            });
            
            // ÊåâÁÖßËÉΩÈáèÈáèÊéíÂ∫èÂÆπÂô®
            if(containers.length > 0) {
                containers.sort((a, b) => b.store.getUsedCapacity(RESOURCE_ENERGY) - a.store.getUsedCapacity(RESOURCE_ENERGY));
                source = containers[0];
            }
            
            // Â¶ÇÊûúÊ≤°ÊúâÂêàÈÄÇÁöÑÂÆπÂô®ÔºåÊü•ÊâæÊéâËêΩÁöÑËµÑÊ∫ê
            if(!source) {
                const droppedResources = creep.room.find(FIND_DROPPED_RESOURCES, {
                    filter: r => r.resourceType === RESOURCE_ENERGY && r.amount > 100
                });
                
                if(droppedResources.length > 0) {
                    // ÊåâÁÖßÊï∞ÈáèÊéíÂ∫èËµÑÊ∫ê
                    droppedResources.sort((a, b) => b.amount - a.amount);
                    source = droppedResources[0];
                }
            }
            
            // Â¶ÇÊûúÊ≤°ÊúâÊéâËêΩÁöÑËµÑÊ∫êÔºåÊü•ÊâæÂ¢ìÁ¢ë
            if(!source) {
                const tombstones = creep.room.find(FIND_TOMBSTONES, {
                    filter: t => t.store.getUsedCapacity(RESOURCE_ENERGY) > 0
                });
                
                if(tombstones.length > 0) {
                    source = tombstones[0];
                }
            }
            
            // Â¶ÇÊûúÊâæÂà∞‰∫ÜËÉΩÈáèÊ∫ê
            if(source) {
                let actionResult;
                
                // Ê†πÊçÆÊ∫êÁ±ªÂûãÊâßË°å‰∏çÂêåÁöÑÊìç‰Ωú
                if(source.store) {
                    // ÂÆπÂô®ÊàñÂ¢ìÁ¢ë
                    actionResult = creep.withdraw(source, RESOURCE_ENERGY);
                } else {
                    // ÊéâËêΩÁöÑËµÑÊ∫ê
                    actionResult = creep.pickup(source);
                }
                
                if(actionResult === ERR_NOT_IN_RANGE) {
                    creep.moveTo(source, {visualizePathStyle: {stroke: '#ffaa00'}});
                }
            }
            // Â¶ÇÊûúÊâæ‰∏çÂà∞ËÉΩÈáèÊ∫êÔºåÁßªÂä®Âà∞ÊàøÈó¥‰∏≠ÂøÉÁ≠âÂæÖ
            else {
                creep.moveTo(new RoomPosition(25, 25, creep.room.name), {
                    visualizePathStyle: {stroke: '#ffaa00'},
                    range: 10
                });
            }
        }
    },
    
    /**
     * Ê£ÄÊü•‰∏ªÊàøÈó¥ÁöÑËÉΩÈáèÂ≠òÂÇ®ÊòØÂê¶Â∑≤Êª°
     * @param {Room} room - ÊàøÈó¥ÂØπË±°
     * @returns {boolean} - ËøîÂõûÊòØÂê¶ÊâÄÊúâ‰∏ªË¶ÅÂ≠òÂÇ®ÈÉΩÂ∑≤Êª°
     */
    isMainRoomEnergyFull: function(room) {
        // Ê£ÄÊü•ÂÇ®Â≠òÁªìÊûÑ
        const storages = room.find(FIND_STRUCTURES, {
            filter: s => s.structureType === STRUCTURE_STORAGE
        });
        
        if(storages.length > 0) {
            const storage = storages[0];
            // Â¶ÇÊûúÂ≠òÂÇ®Âô®Â∑≤Ë∂ÖËøá90%ÂÆπÈáèÔºåËßÜ‰∏∫Êª°
            if(storage.store.getUsedCapacity(RESOURCE_ENERGY) / storage.store.getCapacity(RESOURCE_ENERGY) > 0.9) {
                return true;
            }
        }
        
        // Ê£ÄÊü•ÂÆπÂô®
        const containers = room.find(FIND_STRUCTURES, {
            filter: s => s.structureType === STRUCTURE_CONTAINER
        });
        
        // Â¶ÇÊûúÊúâÂÆπÂô®Âπ∂‰∏îÈÉΩË∂ÖËøá90%ÂÆπÈáè
        if(containers.length > 0) {
            let allFull = true;
            for(const container of containers) {
                if(container.store.getUsedCapacity(RESOURCE_ENERGY) / container.store.getCapacity(RESOURCE_ENERGY) < 0.9) {
                    allFull = false;
                    break;
                }
            }
            if(allFull) return true;
        }
        
        // Ê£ÄÊü•Áîü‰∫ßÁªìÊûÑ
        const spawns = room.find(FIND_MY_SPAWNS);
        const extensions = room.find(FIND_STRUCTURES, {
            filter: s => s.structureType === STRUCTURE_EXTENSION
        });
        
        let spawnsFull = true;
        let extensionsFull = true;
        
        // Ê£ÄÊü•spawnÊòØÂê¶ÈÉΩÊª°
        for(const spawn of spawns) {
            if(spawn.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {
                spawnsFull = false;
                break;
            }
        }
        
        // Ê£ÄÊü•extensionÊòØÂê¶ÈÉΩÊª°
        for(const extension of extensions) {
            if(extension.store.getFreeCapacity(RESOURCE_ENERGY) > 0) {
                extensionsFull = false;
                break;
            }
        }
        
        // ÂΩìÁîü‰∫ßÁªìÊûÑÂíåÂ≠òÂÇ®ÁªìÊûÑÈÉΩÊª°Êó∂ÔºåËøîÂõûtrue
        return spawnsFull && extensionsFull && 
               (storages.length > 0 || containers.length > 0);
    },
    
    /**
     * ÂàõÂª∫ËøúÁ®ãËøêËæìËÄÖ‰ªªÂä°ËØ∑Ê±Ç
     * @param {string} sourceRoomName - Ê∫êÊàøÈó¥ÂêçÁß∞
     * @param {string} targetRoomName - ÁõÆÊ†áÊàøÈó¥ÂêçÁß∞
     */
    createRemoteHaulerTask: function(sourceRoomName, targetRoomName) {
        // Á°Æ‰øùÊúâÁîüÊàêÈòüÂàó
        if(!Memory.spawnQueue) {
            Memory.spawnQueue = {};
        }
        
        if(!Memory.spawnQueue[sourceRoomName]) {
            Memory.spawnQueue[sourceRoomName] = [];
        }
        
        // Ê∑ªÂä†Âà∞ÁîüÊàêÈòüÂàó
        Memory.spawnQueue[sourceRoomName].push({
            role: 'remoteHauler',
            priority: 4, // ‰∏≠Á≠â‰ºòÂÖàÁ∫ß
            memory: {
                role: 'remoteHauler',
                homeRoom: sourceRoomName,
                targetRoom: targetRoomName,
                working: false,
                waiting: false
            }
        });
        
        console.log(`Â∑≤Ê∑ªÂä†ËøúÁ®ãËøêËæìËÄÖ‰ªªÂä°: ‰ªé ${sourceRoomName} Ê¥æÂá∫ËøúÁ®ãËøêËæìËÄÖËá≥ ${targetRoomName}`);
    },
    
    /**
     * Ê†πÊçÆÊ∏∏ÊàèÈò∂ÊÆµÂíåÂèØÁî®ËÉΩÈáèËøîÂõûÈÄÇÂêàÁöÑË∫´‰ΩìÈÉ®‰ª∂
     * @param {number} energy - ÂèØÁî®ËÉΩÈáè
     * @param {Object} gameStage - Ê∏∏ÊàèÈò∂ÊÆµÂØπË±°
     * @returns {Array} - Ë∫´‰ΩìÈÉ®‰ª∂Êï∞ÁªÑ
     */
    getBody: function(energy, gameStage) {
        let body = [];
        
        if(gameStage.level >= 3 && energy >= 600) {
            // ‰∏≠Á∫ßÈò∂ÊÆµÈÖçÁΩÆ
            body = [CARRY, CARRY, CARRY, CARRY, CARRY, CARRY,
                   MOVE, MOVE, MOVE, MOVE, MOVE, MOVE];
        }
        else if(energy >= 400) {
            // Âü∫Á°ÄÈÖçÁΩÆ
            body = [CARRY, CARRY, CARRY, CARRY, MOVE, MOVE, MOVE, MOVE];
        }
        else {
            // ÊúÄÂ∞èÈÖçÁΩÆ
            body = [CARRY, CARRY, MOVE, MOVE];
        }
        
        return body;
    }
};

module.exports = roleRemoteHauler; 