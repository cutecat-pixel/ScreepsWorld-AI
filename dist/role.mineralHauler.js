/**
 * ÁüøÁâ©ËøêËæìËÄÖËßíËâ≤Ê®°Âùó
 * ‰∏ìÈó®Ë¥üË¥£Â∞ÜÁüøÁâ©‰ªéÂÆπÂô®ËøêËæìËá≥Storage
 */
const roleMineralHauler = {
    /**
     * ÁüøÁâ©ËøêËæìËÄÖÁöÑ‰∏ªË¶ÅËøêË°åÈÄªËæë
     * @param {Creep} creep - Ë¶ÅÊéßÂà∂ÁöÑcreepÂØπË±°
     */
    run: function(creep) {
        // Áä∂ÊÄÅÂàáÊç¢ÈÄªËæë
        if(creep.memory.hauling && creep.store.getFreeCapacity() === creep.store.getCapacity()) {
            creep.memory.hauling = false;
            creep.say('üîÑ Êî∂ÈõÜ');
        }
        if(!creep.memory.hauling && creep.store.getFreeCapacity() === 0) {
            creep.memory.hauling = true;
            creep.say('üì¶ ËøêËæì');
        }
        
        // Â¶ÇÊûúÊ≤°ÊúâÊåáÂÆöÁüøÁâ©ÂÆπÂô®ÔºåÊü•ÊâæÂπ∂ÂàÜÈÖç
        if(!creep.memory.containerId) {
            this.findMineralContainer(creep);
        }
        
        // ËøêËæìÊ®°ÂºèÔºöÂ∞ÜÊî∂ÈõÜÁöÑÁüøÁâ©ÈÄÅÂà∞Storage
        if(creep.memory.hauling) {
            // Ê£ÄÊü•ÊòØÂê¶ÊúâStorage
            const storage = creep.room.storage;
            if(!storage) {
                creep.say('‚ùìÊó†Storage');
                return;
            }
            
            // Â∞ùËØïÂ∞ÜÁüøÁâ©ËΩ¨ÁßªÂà∞Storage
            for(const resourceType in creep.store) {
                if(creep.transfer(storage, resourceType) === ERR_NOT_IN_RANGE) {
                    creep.moveTo(storage, {visualizePathStyle: {stroke: '#ffffff'}});
                    break;
                }
            }
        }
        // Êî∂ÈõÜÊ®°ÂºèÔºö‰ªéÁüøÁâ©ÂÆπÂô®‰∏≠Ëé∑ÂèñÁüøÁâ©
        else {
            // Ê£ÄÊü•ÁüøÁâ©ÂÆπÂô®ÊòØÂê¶Â≠òÂú®
            const container = Game.getObjectById(creep.memory.containerId);
            if(!container) {
                delete creep.memory.containerId;
                this.findMineralContainer(creep);
                return;
            }
            
            // Ê£ÄÊü•ÂÆπÂô®‰∏≠ÊòØÂê¶ÊúâÁüøÁâ©ËµÑÊ∫ê
            let hasResources = false;
            for(const resourceType in container.store) {
                if(resourceType !== RESOURCE_ENERGY && container.store[resourceType] > 0) {
                    hasResources = true;
                    break;
                }
            }
            
            if(!hasResources) {
                creep.say('üïí Á≠âËµÑÊ∫ê');
                return;
            }
            
            // ‰ªéÂÆπÂô®Ëé∑ÂèñÁüøÁâ©ËµÑÊ∫ê
            for(const resourceType in container.store) {
                if(resourceType !== RESOURCE_ENERGY) {
                    if(creep.withdraw(container, resourceType) === ERR_NOT_IN_RANGE) {
                        creep.moveTo(container, {visualizePathStyle: {stroke: '#ffaa00'}});
                        break;
                    }
                }
            }
        }
    },
    
    /**
     * Êü•ÊâæÁüøÁâ©ÈôÑËøëÁöÑÂÆπÂô®
     * @param {Creep} creep - ÈúÄË¶ÅÊü•ÊâæÂÆπÂô®ÁöÑcreep
     */
    findMineralContainer: function(creep) {
        // Êü•ÊâæÊàøÈó¥‰∏≠ÁöÑÁüøÁâ©
        const minerals = creep.room.find(FIND_MINERALS);
        if(minerals.length === 0) {
            creep.say('‚ùìÊó†ÁüøÁâ©');
            return;
        }
        
        // Êü•ÊâæÁüøÁâ©ÈôÑËøëÁöÑÂÆπÂô®
        const mineral = minerals[0];
        const containers = mineral.pos.findInRange(FIND_STRUCTURES, 1, {
            filter: s => s.structureType === STRUCTURE_CONTAINER
        });
        
        if(containers.length > 0) {
            creep.memory.containerId = containers[0].id;
            creep.say('‚úÖÊâæÂà∞ÂÆπÂô®');
        } else {
            creep.say('‚ùìÊó†ÂÆπÂô®');
        }
    },
    
    /**
     * Ê†πÊçÆÊ∏∏ÊàèÈò∂ÊÆµÂíåÂèØÁî®ËÉΩÈáèËøîÂõûÈÄÇÂêàÁöÑË∫´‰ΩìÈÉ®‰ª∂
     * @param {number} energy - ÂèØÁî®ËÉΩÈáè
     * @param {Object} gameStage - Ê∏∏ÊàèÈò∂ÊÆµÂØπË±°
     * @returns {Array} - Ë∫´‰ΩìÈÉ®‰ª∂Êï∞ÁªÑ
     */
    getBody: function(energy, gameStage) {
        let body = [];
        
        // ÁüøÁâ©ËøêËæìËÄÖÂè™ÈúÄË¶ÅCARRYÂíåMOVEÈÉ®‰ª∂
        if(gameStage.level >= 7 && energy >= 1000) {
            // È´òÁ∫ßÈò∂ÊÆµÈÖçÁΩÆÔºåÂ§ßÈáèCARRYÂíåMOVE
            body = [
                CARRY, CARRY, CARRY, CARRY, CARRY, CARRY, CARRY, CARRY, CARRY, CARRY,
                MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE
            ];
        }
        else if(gameStage.level >= 6 && energy >= 600) {
            // ‰∏≠Á∫ßÈò∂ÊÆµÈÖçÁΩÆ
            body = [
                CARRY, CARRY, CARRY, CARRY, CARRY, CARRY,
                MOVE, MOVE, MOVE, MOVE, MOVE, MOVE
            ];
        }
        else {
            // Âü∫Á°ÄÈÖçÁΩÆ
            body = [CARRY, CARRY, CARRY, MOVE, MOVE, MOVE];
        }
        
        return body;
    }
};

module.exports = roleMineralHauler; 